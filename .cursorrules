# Правила проекта Appyland

## Язык общения
- Всегда отвечай и пиши на русском языке
- Комментарии в коде — на русском, если код не самодокументируем

## Стиль общения
- Говори спокойно, без спешки
- Объясняй, если что-то может быть неочевидно
- Пользователь — начинающий разработчник, но умеет разбираться
- Подсказывай лучшие решения, особенно если есть риск ошибки

## Технологический стек
- Статический сайт: HTML + CSS + JavaScript
- Lottie анимации для интерактивных элементов
- Без фреймворков (vanilla JS)
- Адаптивная верстка (mobile-first)

## Стиль кода
- Следуй существующему стилю проекта
- Табы для отступов (как в текущих файлах)
- Читаемость и поддерживаемость важнее краткости
- Минимальные зависимости
- Чистые функции где возможно

## Структура проекта
- `/css/dev/index.css` — рабочий CSS (разработка)
- `/css/index.min.css` — минифицированная версия (продакшн)
- `/js/dev/index.js` — рабочий JS (разработка)
- `/js/index.min.js` — минифицированная версия (продакшн)
- `/assets/animations/` — Lottie JSON анимации
- `/assets/img/` — изображения (с оптимизированными версиями)

## Git workflow
### Conventional Commits (обязательно!)
Используй следующие префиксы:

- `feat:` — новая функциональность
  - `feat(hero): добавлена новая анимация логотипа`
  - `feat(team): добавлен раздел команды`

- `fix:` — исправление бага
  - `fix(animations): исправлено зависание Lottie на мобильных`
  - `fix(css): исправлено выравнивание букв в hero`

- `style:` — изменения стилей (CSS, форматирование)
  - `style(hero): скорректированы размеры букв логотипа`
  - `style: исправлены отступы в CSS`

- `refactor:` — рефакторинг без изменения функциональности
  - `refactor(animations): вынесена логика инициализации Lottie`

- `perf:` — улучшение производительности
  - `perf(images): оптимизированы изображения команды`

- `docs:` — документация
  - `docs: обновлен README`

- `chore:` — технические задачи
  - `chore: обновлены зависимости`

### Примеры хороших коммитов для этого проекта:
```
feat(hero): обновлены 3D анимации букв логотипа
style(hero): скорректированы размеры и пропорции букв
fix(animations): исправлена загрузка Lottie на мобильных устройствах
refactor(css): вынесены CSS переменные для букв логотипа
```

## CSS правила
- Используй существующие CSS переменные где возможно
- Респонсивность через clamp() и media queries
- Mobile-first подход
- БЭМ-подобная структура классов (`.hero__logo-letter`)
- Комментарии на русском для сложных CSS правил

## JavaScript правила
- Vanilla JS без фреймворков
- Async/await для асинхронных операций
- Try/catch для обработки ошибок
- Комментарии на русском для сложной логики
- События через addEventListener

## Анимации (Lottie)
- JSON файлы в `/assets/animations/`
- Атрибут `data-animation` для связи с элементами
- Проверка загрузки анимаций (error handling)
- Оптимизация для мобильных устройств

## Адаптивность
- Десктоп: от 1440px
- Планшет: 768px - 1439px  
- Мобильный: до 767px
- Критические точки: 480px, 750px
- Тестируй на мобильных устройствах

## Важные принципы
1. Перед изменениями спрашивай, если что-то спорно
2. Всегда показывай, что именно меняешь
3. Объясняй причины изменений
4. Проверяй на ошибки (linter)
5. Думай о производительности
6. Сохраняй обратную совместимость

## Перед коммитом
- [ ] Проверь lint ошибки
- [ ] Убедись, что изменения работают в браузере
- [ ] Conventional commit message
- [ ] Комментарии на русском (где нужно)
- [ ] Проверь адаптивность (если менял layout)

## Дополнительно
- Отвечай кратко, по делу, спокойно
- Не делай ничего, что пользователь явно не просил
- Спрашивай перед необратимыми действиями
- Помни: пользователь учится — объясняй

